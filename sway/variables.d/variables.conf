### Variables
#
# Logo key. Use Mod1 for Alt.
set $mod Mod4

# Your preferred terminal emulator
set $term footclient
set $term_cwd $term -D "$(/usr/share/sway/scripts/swaycwd.sh 2>/dev/null || echo $HOME)"
set $term_server foot --server
set $term_float footclient -a floating_shell

# rofi theme
set $rofi_theme "* {lightbg: $background-color; background: $background-color; lightfg: $accent-color; foreground: $text-color; border-color: $accent-color;} window {border: 1;}"

# Your preferred application launcher
set $menu rofi -show combi -combi-modi "drun" -terminal $term -ssh-command "{terminal} {ssh-client} {host} [-p {port}]" -run-shell-command "{terminal} {cmd}" -show-icons
# set $menu rofi -show combi -combi-modi "drun" -terminal $term -ssh-command "{terminal} {ssh-client} {host} [-p {port}]" -run-shell-command "{terminal} {cmd}" -show-icons -font "$gui-font"

# Add --to-code to bindsym, support for non-latin layouts
set $bindsym bindsym --to-code

# Add --to-code to unbindsym, support for non-latin layouts
set $unbindsym unbindsym --to-code

# Volume notification
set $volume_bar ~/etc/sway/scripts/volume-notify.sh

# Brightness notification
set $brightness_bar ~/etc/sway/scripts/brightness-notify.sh

# brightness control
set $brightness_step bash -c 'echo $(( $(light -Mr) / 100 * 5 < 1 ? 1 : $(( $(light -Mr) / 100 * 5 )) ))'
set $brightness_up light -r -A $($brightness_step) && $brightness_bar
set $brightness_down light -r -U $($brightness_step) && $brightness_bar

# Keyboard toggle
set $keyboardtoggle '~/etc/sway/scripts/keyboard-toggle.sh'

# Volume control
set $volume_down pulsemixer --change-volume -5 && $volume_bar
set $volume_up pulsemixer --change-volume +5 && $volume_bar
set $volume_mute pulsemixer --toggle-mute && $volume_bar

# clipboard history
set $clipboard cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to copy" -lines 10 -width 35 | cliphist decode | wl-copy
set $clipboard-del cliphist list | rofi -dmenu -font "$gui-font" -p "Select item to delete" -lines 10 -width 35 | cliphist delete

# bluetooth menu
set $rofi_bluetooth ~/etc/sway/scripts/rofi-bluetooth.sh

### Idle configuration
# This will lock your screen after 300 seconds of inactivity, then turn off
# your displays after another 300 seconds, and turn your screens back on when
# resumed. It will also lock your screen before your computer goes to sleep.
#
set $lock ~/.config/swaylock/lock.sh
set $idle_timeout 600
set $locking_timeout 900
set $screen_timeout 1800
set $idle swayidle -w \
    timeout $idle_timeout 'light -G > /tmp/brightness && light -S 10' resume 'light -S $([ -f /tmp/brightness ] && cat /tmp/brightness || echo 100%)' \
    timeout $locking_timeout $lock \
    timeout $screen_timeout 'swaymsg "output * power off"' \
    resume 'swaymsg "output * power on"' \
    before-sleep 'playerctl pause' \
    before-sleep $lock & \
    lock $lock &

# Pulseaudo command
set $pulseaudio pavucontrol

# calendar application
set $calendar $term_float calcurse

# workspace names
set $ws1 number 1
set $ws2 number 2
set $ws3 number 3
set $ws4 number 4
set $ws5 number 5
set $ws6 number 6
set $ws7 number 7
set $ws8 number 8
set $ws9 number 9
set $ws10 number 10
set $ws11 number 11
set $ws12 number 12
set $ws13 number 13
set $ws14 number 14
set $ws15 number 15
set $ws16 number 16
set $ws17 number 17
set $ws18 number 18
set $ws19 number 19
set $ws20 number 20

# screenshot
set $screenshot_screen grimshot save output "/home/sphink/Pictures/screenshots/2024/$(date +%Y-%m-%d_%H-%M-%S).png" && notify-send "Screenshot saved" -c "hud"
set $screenshot_selection exec bash -c 'IMG=~/Pictures/screenshots/2024/$(date +%Y-%m-%d_%H-%M-%S).png && grimshot save window $IMG && swappy -f $IMG -o $IMG && wl-copy -t "image/png" < $IMG && notify-send "Screenshot saved" -c "hud"'

# PolicyKit agent
set $polkit_agent /usr/bin/lxpolkit &

# Night color
set $wlsunset '[ -x "$(command -v wlsunset)" ] && /usr/share/sway/scripts/sunset.sh "on"'

# Autotiling script
set $autotiling '[ -x "$(command -v autotiling)" ] && autotiling'

# Automatic workspace names
set $autoname_workspaces '~/etc/sway/scripts/autoname-workspaces.py'

# restart kanshi https://github.com/emersion/kanshi/issues/43#issuecomment-531679213
set $kanshi '[ -x "$(command -v kanshi)" ] && pkill kanshi; exec kanshi'

# Workaround for applying GTK theme
set $import_gsettings '[ -f /usr/share/sway/scripts/import-gsettings.sh ] && /usr/share/sway/scripts/import-gsettings.sh'

# Dex autostart daemon
set $dex_autostart '[ -x "$(command -v dex)" ] && gdbus wait --session org.kde.StatusNotifierWatcher && dex --autostart'

# Swayr daemon
set $swayr_daemon '[ -x "$(command -v swayrd)" ] && env RUST_BACKTRACE=1 RUST_LOG=swayr=debug swayrd &> /tmp/swayrd.log'

# Power notifications daemon
set $poweralertd '[ -x "$(command -v poweralertd)" ] && pkill poweralertd; sleep 5; poweralertd -s -i "line power" &'

# Clipboard manager
set $cliphist_store '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch cliphist store'
set $cliphist_watch '[ -x "$(command -v wl-paste)" ] && [ -x "$(command -v cliphist)" ] && wl-paste --watch pkill -RTMIN+9 waybar'

# Start nwg-drawer as a daemon
set $nwg_drawer_daemon '[ -x "$(command -v nwg-drawer)" ] && nwg-drawer -r -ovl'

# Start playerctl as daemon
set $watch_playerctl '[ -x "$(command -v playerctl)" ] && pkill playerctl; playerctl -a metadata --format \'{{status}} {{title}}\' --follow | while read line; do pkill -RTMIN+5 waybar; done'

# Update Rofi theme based on $rofi_theme colors
set $update_rofi_theme mkdir -p $HOME/.config/rofi/ && echo $rofi_theme > $HOME/.config/rofi/config.rasi

# Start Calcurse calendar as a daemon
set $calendar_daemon 'calcurse --daemon'

# Start mopidy
set $mopidy 'mopidy --config /home/sphink/etc/mopidy/mopidy.conf:/home/sphink/etc/mopidy/mopidy.SECRET.conf'

# Start syncthing
set $syncthing 'syncthing -no-browser'

# Start network manager menu
set $network_manager_menu 'nmcli d wifi rescan && networkmanager_dmenu'